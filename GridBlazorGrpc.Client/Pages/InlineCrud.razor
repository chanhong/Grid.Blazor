@page "/inlinecrud"
@using GridBlazorGrpc.Client.ColumnCollections
@using GridBlazorGrpc.Shared.Models
@using Microsoft.Extensions.Primitives
@using System
@using System.Globalization
@using System.Threading.Tasks
@inject IGridClientService gridClientService
@inject ICrudDataService<Order> orderService

<h1>Grid Sample</h1>

<p>
    This page contains a CRUD grid with inline editing capabilities. It allows you to edit orders directly within the grid interface. Double click on a row to edit it. Click on any other row to clear edition.
</p>

<p>
    This component demonstrates a GridBlazor client-side grid using gRPC to communicate with the back-end. For more information, please see: <a href="https://github.com/gustavnavar/Grid.Blazor">https://github.com/gustavnavar/Grid.Blazor</a>
</p>

@if (_task1.IsCompleted && _task2.IsCompleted && _task3.IsCompleted && _task4.IsCompleted)
{
    <div class="row">
        <div class="col-md-12">
            <GridComponent T="Order" @ref="_gridComponent" Grid="@_grid"></GridComponent>
        </div>
    </div>
}
else
{
    <p><em>Loading...</em></p>
}

@code
{
    private CGrid<Order> _grid;
    private GridComponent<Order> _gridComponent;
    private bool _afterRenderExecuted = false;
    private IEnumerable<SelectItem> _customers;
    private IEnumerable<SelectItem> _employees;
    private IEnumerable<SelectItem> _shippers;
    private Task<IEnumerable<SelectItem>> _task1;
    private Task<IEnumerable<SelectItem>> _task2;
    private Task<IEnumerable<SelectItem>> _task3;
    private Task _task4;

    protected override async Task OnParametersSetAsync()
    {
        var locale = CultureInfo.CurrentCulture;
        _task1 = gridClientService.GetAllCustomers();
        _customers = await _task1;
        _task2 = gridClientService.GetAllEmployees();
        _employees = await _task2;
        _task3 = gridClientService.GetAllShippers();
        _shippers = await _task3;

        Action<IGridColumnCollection<Order>> orderColumns = c =>
            ColumnCollections.OrderColumnsWithInlineCrud(c, o => gridClientService.GetAllCustomers(),
            o => gridClientService.GetAllEmployees(),
            o => gridClientService.GetAllShippers(),
            _customers, _employees, _shippers);

        var query = new QueryDictionary<string>();

        var client = new GridClient<Order>(gridClientService.GetOrdersGridAllFeatures, query, false, "ordersGrid", orderColumns, locale)
            .Sortable()
            .Filterable()
            .SetStriped(true)
            .Crud(true, CrudType.Inline, orderService)
            .WithMultipleFilters()
            .WithGridItemsCount();

        _grid = client.Grid;

        // Set new items to grid
        _task4 = client.UpdateGrid();
        await _task4;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!_afterRenderExecuted && _gridComponent != null)
        {
            _gridComponent.BeforeInsert += BeforeInsert;
            _gridComponent.BeforeUpdate += BeforeUpdate;
            _gridComponent.BeforeDelete += BeforeDelete;
            _afterRenderExecuted = true;
        }
    }

    private async Task<bool> BeforeInsert(GridCreateComponent<Order> component, Order item)
    {
        var orderValidator = new OrderValidator();
        var valid = await orderValidator.ValidateAsync(item);

        if (!valid.IsValid)
        {
            component.Error = "Insert operation returned one or more errors";
            foreach (var error in valid.Errors)
            {
                component.ColumnErrors.AddParameter(error.PropertyName, error.ErrorMessage);
            }
        }

        return valid.IsValid;
    }

    private async Task<bool> BeforeUpdate(GridUpdateComponent<Order> component, Order item)
    {
        var orderValidator = new OrderValidator();
        var valid = await orderValidator.ValidateAsync(item);

        if (!valid.IsValid)
        {
            component.Error = "Update operation returned one or more errors";
            foreach (var error in valid.Errors)
            {
                component.ColumnErrors.AddParameter(error.PropertyName, error.ErrorMessage);
            }
        }

        return valid.IsValid;
    }

    private async Task<bool> BeforeDelete(GridDeleteComponent<Order> component, Order item)
    {
        var orderValidator = new OrderValidator();
        var valid = await orderValidator.ValidateAsync(item);

        if (!valid.IsValid)
        {
            component.Error = valid.ToString();
        }

        return valid.IsValid;
    }
}
