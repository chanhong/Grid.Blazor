@using GridBlazor.Resources
@using GridShared
@using GridShared.Columns

@typeparam T

@if (Grid.ComponentOptions.Selectable)
{
    <tr class="grid-row@(GridComponent.SelectedRow == GridPosition || GridComponent.SelectedRows.Contains(GridPosition) || (Grid.ComponentOptions.InitSelection && GridPosition == 0 && GridComponent.SelectedRow == -1 && GridComponent.SelectedRows.Count == 0) ? " grid-row-selected" : "") @Grid.GetRowCssClasses(Item)" @onclick="(args) => GridComponent.RowClicked(GridPosition, Item, args)" @onclick:stopPropagation @ondblclick="_ => GridComponent.RowDblClicked(GridPosition)" @ondblclick:stopPropagation>
        @if (HasSubGrid)
        {
            <td class="@GridComponent.GridCellCssClass @GridComponent.GridSubGridCssClass" data-is-rendered="false" data-is-visible="false" data-name="" style="width:36.5px;" @onclick="SubGridClicked" @onclick:stopPropagation>
                @if (GridComponent.IsSubGridVisible[GridPosition])
                {
                    <span class="subgrid-caret-down">&nbsp;</span>
                }
                else
                {
                    <span class="subgrid-caret">&nbsp;</span>
                }
            </td>
        }
        @if ((Grid.ReadEnabled || ((CGrid<T>)Grid).FuncReadEnabled != null) && !GridComponent.HeaderCrudButtons)
        {
            <td class="@GridComponent.GridButtonCellCssClass" data-name="" style="width:35px;">
                @if (Grid.ReadEnabled || (((CGrid<T>)Grid).FuncReadEnabled != null && ((CGrid<T>)Grid).FuncReadEnabled((T)Item)))
                {
                    @if (string.IsNullOrWhiteSpace(Grid.ReadLabel))
                    {
                        <button class='grid-button grid-button-view @GridComponent.Grid.HtmlClass.Button' title="@Grid.ReadTooltip" @onclick="@(e => GridComponent.ReadHandler(Item))" type="button" @onclick:stopPropagation></button>
                    }
                    else
                    {
                        <button class='grid-button-label-view @GridComponent.Grid.HtmlClass.ButtonPrimary' title="@Grid.ReadTooltip" @onclick="@(e => GridComponent.ReadHandler(Item))" type="button" @onclick:stopPropagation>@Grid.ReadLabel</button>
                    }  
                }
            </td>
        }
        @if ((Grid.UpdateEnabled || ((CGrid<T>)Grid).FuncUpdateEnabled != null) && !GridComponent.HeaderCrudButtons
            && (Grid.CrudType == CrudType.Form || Grid.CrudType == CrudType.FormOrInline || Grid.CrudType == CrudType.FormAndInline))
        {
            <td class="@GridComponent.GridButtonCellCssClass" data-name="" style="width:35px;">
                @if (Grid.UpdateEnabled || (((CGrid<T>)Grid).FuncUpdateEnabled != null && ((CGrid<T>)Grid).FuncUpdateEnabled((T)Item)))
                {
                    @if (string.IsNullOrWhiteSpace(Grid.UpdateLabel))
                    {
                        <button class='grid-button grid-button-edit @GridComponent.Grid.HtmlClass.Button' title="@Grid.UpdateTooltip" @onclick="@(e => GridComponent.UpdateHandler(Item))" type="button" @onclick:stopPropagation></button>
                    }
                    else
                    {
                        <button class='grid-button-label-edit @GridComponent.Grid.HtmlClass.ButtonPrimary' title="@Grid.UpdateTooltip" @onclick="@(e => GridComponent.UpdateHandler(Item))" type="button" @onclick:stopPropagation>@Grid.UpdateLabel</button>
                    } 
                }
            </td>
        }
        @if ((Grid.DeleteEnabled || ((CGrid<T>)Grid).FuncDeleteEnabled != null) && !GridComponent.HeaderCrudButtons)
        {
            <td class="@GridComponent.GridButtonCellCssClass" data-name="" style="width:35px;">
                @if (Grid.DeleteEnabled || (((CGrid<T>)Grid).FuncDeleteEnabled != null && ((CGrid<T>)Grid).FuncDeleteEnabled((T)Item)))
                {
                    @if (string.IsNullOrWhiteSpace(Grid.DeleteLabel))
                    {
                        <button class='grid-button grid-button-delete @GridComponent.Grid.HtmlClass.Button' title="@Grid.DeleteTooltip" @onclick="@(e => GridComponent.DeleteHandler(Item))" type="button" @onclick:stopPropagation></button>
                    }
                    else
                    {
                        <button class='grid-button-label-delete @GridComponent.Grid.HtmlClass.ButtonPrimary' title="@Grid.DeleteTooltip" @onclick="@(e => GridComponent.DeleteHandler(Item))" type="button" @onclick:stopPropagation>@Grid.DeleteLabel</button>
                    }
                }
            </td>
        }
        @if (Grid.CrudType == CrudType.Inline || Grid.CrudType == CrudType.InlineOrForm || Grid.CrudType == CrudType.FormAndInline)
        {
            <td class="@GridComponent.GridButtonCellCssClass" data-name="" style="width:35px;">
                @if (GridComponent.InlineCrudRow == GridPosition)
                {
                    <button class="grid-button grid-button-save @Grid.HtmlClass.Button" type="button" title="Save" @onclick="async _ => await GridComponent.SaveItem(Item)" @onclick:stopPropagation></button>
                }
            </td>
        }
        @if (RequiredTotalsColumn)
        {
            <td class="@GridComponent.GridCellCssClass" data-name="" style="width:90px;"></td>
        }
        @foreach (IGridColumn column in Grid.Columns)
        {
            <GridCellComponent T="@T" Column="@column" Item="@Item" RowId="GridPosition" TdClass="@GridComponent.GridCellCssClass"></GridCellComponent>
        }
    </tr>
}
else
{
    <tr class="grid-row @Grid.GetRowCssClasses(Item)" @onclick="_ => GridComponent.ClearInlineCrudRow(GridPosition)" @onclick:stopPropagation @ondblclick="_ => GridComponent.RowDblClicked(GridPosition)" @ondblclick:stopPropagation>
        @if (HasSubGrid)
        {
            <td class="@GridComponent.GridCellCssClass @GridComponent.GridSubGridCssClass" data-is-rendered="false" data-is-visible="false" data-name="" style="width:36.5px;" @onclick="SubGridClicked" @onclick:stopPropagation>
                @if (GridComponent.IsSubGridVisible[GridPosition])
                {
                    <span class="subgrid-caret-down">&nbsp;</span>
                }
                else
                {
                    <span class="subgrid-caret">&nbsp;</span>
                }
            </td>
        }
        @if ((Grid.ReadEnabled || ((CGrid<T>)Grid).FuncReadEnabled != null) && !GridComponent.HeaderCrudButtons)
        {
            <td class="@GridComponent.GridButtonCellCssClass" data-name="" style="width:35px;">
                @if (Grid.ReadEnabled || (((CGrid<T>)Grid).FuncReadEnabled != null && ((CGrid<T>)Grid).FuncReadEnabled((T)Item)))
                {
                    @if (string.IsNullOrWhiteSpace(Grid.ReadLabel))
                    {
                        <button class='grid-button grid-button-view @GridComponent.Grid.HtmlClass.Button' title="@Grid.ReadTooltip" @onclick="@(e => GridComponent.ReadHandler(Item))" type="button" @onclick:stopPropagation></button>
                    }
                    else
                    {
                        <button class='grid-button-label-view @GridComponent.Grid.HtmlClass.ButtonPrimary' title="@Grid.ReadTooltip" @onclick="@(e => GridComponent.ReadHandler(Item))" type="button" @onclick:stopPropagation>@Grid.ReadLabel</button>
                    } 
                }
            </td>
        }
        @if ((Grid.UpdateEnabled || ((CGrid<T>)Grid).FuncUpdateEnabled != null) && !GridComponent.HeaderCrudButtons
            && (Grid.CrudType == CrudType.Form || Grid.CrudType == CrudType.FormOrInline || Grid.CrudType == CrudType.FormAndInline))
        {
            <td class="@GridComponent.GridButtonCellCssClass" data-name="" style="width:35px;">
                @if (Grid.UpdateEnabled || (((CGrid<T>)Grid).FuncUpdateEnabled != null && ((CGrid<T>)Grid).FuncUpdateEnabled((T)Item)))
                {
                    @if (string.IsNullOrWhiteSpace(Grid.UpdateLabel))
                    {
                        <button class='grid-button grid-button-edit @GridComponent.Grid.HtmlClass.Button' title="@Grid.UpdateTooltip" @onclick="@(e => GridComponent.UpdateHandler(Item))" type="button" @onclick:stopPropagation></button>
                    }
                    else
                    {
                        <button class='grid-button-label-edit @GridComponent.Grid.HtmlClass.ButtonPrimary' title="@Grid.UpdateTooltip" @onclick="@(e => GridComponent.UpdateHandler(Item))" type="button" @onclick:stopPropagation>@Grid.UpdateLabel</button>
                    }
                }
            </td>
        }
        @if ((Grid.DeleteEnabled || ((CGrid<T>)Grid).FuncDeleteEnabled != null) && !GridComponent.HeaderCrudButtons)
        {
            <td class="@GridComponent.GridButtonCellCssClass" data-name="" style="width:35px;">
                @if (Grid.DeleteEnabled || (((CGrid<T>)Grid).FuncDeleteEnabled != null && ((CGrid<T>)Grid).FuncDeleteEnabled((T)Item)))
                {
                    @if (string.IsNullOrWhiteSpace(Grid.DeleteLabel))
                    {
                        <button class='grid-button grid-button-delete @GridComponent.Grid.HtmlClass.Button' title="@Grid.DeleteTooltip" @onclick="@(e => GridComponent.DeleteHandler(Item))" type="button" @onclick:stopPropagation></button>
                    }
                    else
                    {
                        <button class='grid-button-label-delete @GridComponent.Grid.HtmlClass.ButtonPrimary' title="@Grid.DeleteTooltip" @onclick="@(e => GridComponent.DeleteHandler(Item))" type="button" @onclick:stopPropagation>@Grid.DeleteLabel</button>
                    }
                }
            </td>
        }
        @if (Grid.CrudType == CrudType.Inline || Grid.CrudType == CrudType.InlineOrForm || Grid.CrudType == CrudType.FormAndInline)
        {
            <td class="@GridComponent.GridButtonCellCssClass" data-name="" style="width:35px;">
                @if (GridComponent.InlineCrudRow == GridPosition)
                {
                    <button class="grid-button grid-button-save @Grid.HtmlClass.Button" type="button" title="Save" @onclick="async _ => await GridComponent.SaveItem(Item)" @onclick:stopPropagation></button>
                }
            </td>
        }
        @if (RequiredTotalsColumn)
        {
            <td class="@GridComponent.GridCellCssClass" data-name="" style="width:90px;"></td>
        }
        @foreach (IGridColumn column in Grid.Columns)
        {
            <GridCellComponent T="@T" Column="@column" Item="@Item" RowId="GridPosition" TdClass="@GridComponent.GridCellCssClass"></GridCellComponent>
        }
    </tr>
}
@if (HasSubGrid)
{
    int cols = 0;
    if (RequiredTotalsColumn)
    {
        cols++;
    }
    if ((Grid.ReadEnabled || ((CGrid<T>)Grid).FuncReadEnabled != null) && !GridComponent.HeaderCrudButtons)
    {
        cols++;
    }
    if ((Grid.UpdateEnabled || ((CGrid<T>)Grid).FuncUpdateEnabled != null) && !GridComponent.HeaderCrudButtons
        && (Grid.CrudType == CrudType.Form || Grid.CrudType == CrudType.FormOrInline || Grid.CrudType == CrudType.FormAndInline))
    {
        cols++;
    }
    if ((Grid.DeleteEnabled || ((CGrid<T>)Grid).FuncDeleteEnabled != null) && !GridComponent.HeaderCrudButtons)
    {
        cols++;
    }
    if (Grid.CrudType == CrudType.Inline || Grid.CrudType == CrudType.InlineOrForm || Grid.CrudType == CrudType.FormAndInline)
    {
        cols++;
    }
    cols += Grid.Columns.Count();
    var values = Grid.GetSubGridKeyValues(Item);
    IEnumerable<Action<object>> onRowClickedActions = null;
    if (GridComponent.OnRowClickedActions != null && GridComponent.OnRowClickedActions.Count() > 1)
    {
        onRowClickedActions = GridComponent.OnRowClickedActions.Where(r => !r.Equals(GridComponent.OnRowClickedActions.First()));
    }
    <tr class="subgrid-row">
        <SubGridComponent T="@T" GridPosition="@GridPosition" Cols="@cols" Values="@values" OnRowClickedActions="onRowClickedActions"></SubGridComponent>
    </tr>
}
